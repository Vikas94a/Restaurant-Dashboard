rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is a restaurant owner
    function isRestaurantOwner(restaurantId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/restaurants/$(restaurantId)) &&
        get(/databases/$(database)/documents/restaurants/$(restaurantId)).data.ownerId == request.auth.uid;
    }

    // Helper function to check if user is creating their first restaurant
    function isNewRestaurantOwner() {
      return isAuthenticated() && 
        !exists(/databases/$(database)/documents/restaurants/$(request.resource.data.ownerId));
    }

    // Helper function to check if domain is unique
    function isDomainUnique(domain) {
      return !exists(/databases/$(database)/documents/restaurants/$(domain));
    }

    // Helper function to check if user is allowed to sign up (only specific email)
    function isAllowedSignup() {
      return request.auth.token.email == 'tredev.randaberg@gmail.com';
    }

    // Restaurants collection rules
    match /restaurants/{restaurantId} {
      allow read: if true;  // Anyone can read restaurant details
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid && 
        request.resource.data.domain != null;  // User can create their own restaurant with domain
      allow update, delete: if isRestaurantOwner(restaurantId);  // Only owner can update/delete

      // Orders subcollection rules
      match /orders/{orderId} {
        allow create: if true;  // Anyone can create an order
        allow read: if isRestaurantOwner(restaurantId);  // Only restaurant owner can read orders
        allow update: if isRestaurantOwner(restaurantId);  // Only restaurant owner can update order status
        allow delete: if false;  // No one can delete orders
      }

      // Rules for the 'menu' subcollection
      match /menu/{menuItemId} {
        allow read: if true;  // Anyone can read menu items
        allow write: if isRestaurantOwner(restaurantId);  // Only restaurant owner can modify menu
      }

      // Rules for the 'categories' subcollection
      match /categories/{categoryId} {
        allow read: if true;  // Anyone can read categories
        allow write: if isRestaurantOwner(restaurantId);  // Only restaurant owner can modify categories
      }

      // Rules for the 'aiPosts' subcollection
      match /aiPosts/{dateId} {
        // Only the restaurant owner can read/write AI posts
        allow read: if isRestaurantOwner(restaurantId);
        allow create, update, delete: if isRestaurantOwner(restaurantId);
      }

      // Rules for the 'feedbackSummaries' subcollection
      match /feedbackSummaries/{feedbackId} {
        // Only the restaurant owner can read/write feedback summaries
        allow read: if isRestaurantOwner(restaurantId);
        allow create, update, delete: if isRestaurantOwner(restaurantId);
      }

      // Rules for the 'customerFeedback' subcollection
      match /customerFeedback/{orderId} {
        // Anyone can create customer feedback (for feedback form)
        allow create: if true;
        // Only restaurant owner can read customer feedback
        allow read: if isRestaurantOwner(restaurantId);
        // No updates or deletes allowed (for data integrity)
        allow update, delete: if false;
      }

      // Rules for the 'reusableExtraGroups' subcollection
      match /reusableExtraGroups/{groupId} {
        allow list, get: if true; // Anyone can read
        allow create, update, delete: if isRestaurantOwner(restaurantId); // Only owner can write
      }

      // Rules for the 'reusableExtras' subcollection
      match /reusableExtras/{extraId} {
        allow list, get: if true;
        allow create, update, delete: if isRestaurantOwner(restaurantId);
      }

      // Rules for the 'reservations' subcollection
      match /reservations/{reservationId} {
        allow create: if true;  // Anyone can create a reservation for this restaurant
        allow read: if isAuthenticated() && isRestaurantOwner(restaurantId);  // Only restaurant owner can read reservations
        allow update: if isAuthenticated() && isRestaurantOwner(restaurantId);  // Only restaurant owner can update reservations
        allow delete: if false;  // No one can delete reservations (for audit trail)
      }
    }

    // Users collection rules - STRICT ACCESS CONTROL
    match /users/{userId} {
      // Only allow read/write if user is authenticated and it's their own data
      // AND only allow creation if the user is the allowed email address
      allow read, update, delete: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == userId && 
        isAllowedSignup();
    }

    // Additional security: Block all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
