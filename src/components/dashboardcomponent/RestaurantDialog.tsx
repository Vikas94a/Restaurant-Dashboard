"use client"; 
// Tells Next.js that this component should be rendered on the client side (not server-side rendered)

import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"; // Custom Dialog components (modal popup)
import { Label } from "@/components/ui/label"; // Accessible label component
import { Input } from "../ui/input"; // Custom input component
import { Button } from "../ui/button"; // Custom button component
import { db } from "@/lib/firebase"; // Firebase Firestore database instance
import { collection, addDoc, Timestamp } from "firebase/firestore"; // Firestore functions
import { toast } from "sonner"; // Toast notifications library
import RestaurantType from "./RestaurantType"; // Subcomponent for selecting restaurant type
import RestaurantTiming from "./RestaurantTiming"; // Subcomponent for setting opening hours
import { useAppSelector } from '@/store/hooks';


// Interface to define opening hours for each day
export interface OpeningHours {
  day: string;    // Day of the week (e.g., "monday")
  open: string;   // Opening time (e.g., "09:00")
  close: string;  // Closing time (e.g., "17:00")
  closed: boolean; // Whether restaurant is closed on that day
}

// Interface to define the structure of restaurant data
export interface Restaurant {
  restaurantId?: string; // Optional restaurant ID (auto-generated by Firestore)
  ownerId?: string;      // User ID of the owner (from authentication)
  city: string;
  zipCode: string;
  streetName: string;
  phoneNumber: string;
  restaurantType: string;
  openingHours: OpeningHours[]; // Array of opening hours for each day
  logoUrl?: string;             // Optional logo image URL
  createdAt?: string;           // Timestamp when created
  updatedAt?: string;           // Timestamp when last updated
}

/**
 * Array of days to initialize opening hours state for each day of the week.
 */
export const day = [
  "sunday",
  "monday",
  "tuesday",
  "wednesday",
  "thursday",
  "friday",
  "saturday",
];

interface RestaurantDialogProps {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
}

/**
 * RestaurantDialog Component
 * 
 * A multi-step modal dialog to collect restaurant information.
 * Steps include Address info, Restaurant Type, and Opening Hours.
 * 
 * @param {RestaurantDialogProps} props - Props include:
 *  - isOpen: boolean to control visibility of the dialog
 *  - setIsOpen: function to update visibility (open/close dialog)
 */
function RestaurantDialog({ isOpen, setIsOpen }: RestaurantDialogProps) {
  // Define all steps of the dialog to control navigation
  const steps = ["Address", "TypeOfRestaurant", "Timing"];

  // Current step index, starting at 0 (Address)
  const [step, setStep] = useState(0);

  // Initialize openingHours state with one entry per day, defaulting to closed
  const [openingHours, setOpeningHours] = useState<OpeningHours[]>(
    day.map((day) => ({
      day,
      open: "",
      close: "",
      closed: false,
    }))
  );

  // Restaurant data state holding all inputs from the form
  const [restaurantData, setRestaurantData] = useState<Restaurant>({
    restaurantId: "",
    ownerId: "",
    city: "",
    zipCode: "",
    streetName: "",
    phoneNumber: "",
    restaurantType: "",
    openingHours: openingHours, // Initially the default opening hours
    logoUrl: "",
  });

  // Use AppSelector to get user authentication info
  const user = useAppSelector((state) => state.auth.user);
  if (!user) {
    // If no user available (e.g. user not logged in), log error and render nothing
    console.log("User is null");
    return null;
  }

  // Handle input changes on form fields (city, zipCode, etc.)
  const handleForm = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Update the corresponding field in restaurantData state
    setRestaurantData({ ...restaurantData, [e.target.name]: e.target.value });
  };

  /**
   * Handle form submission when user clicks Submit on last step.
   * Save restaurant data to Firestore database.
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); // Prevent default form submission behavior (page reload)

    try {
      // Add a new document to 'restaurants' collection in Firestore
      const refRestaurantCollection = await addDoc(
        collection(db, "restaurants"),
        {
          ...restaurantData,        // Spread all current restaurant data fields
          ownerId: user.uid,        // Attach current user ID as owner
          openingHours: openingHours, // Make sure openingHours state is saved
          createdAt: Timestamp.now(), // Firestore timestamp for creation
          updatedAt: Timestamp.now(), // Firestore timestamp for update
        }
      );

      // If document added successfully
      if (refRestaurantCollection) {
        setIsOpen(false); // Close the dialog modal
        toast.success("Restaurant information updated successfully"); // Show success notification
      }
    } catch (error) {
      // Log any errors during saving
      console.error("Error saving restaurant:", error);
      toast.error("Failed to save restaurant information");
    }
  };

  console.log(restaurantData); // Debug: log current form state on each render

  return (
    <div className="">
      {/* Dialog component from UI library */}
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <DialogHeader>
            {/* Dialog title */}
            <DialogTitle className="text-center font-bold  text-2xl text-gray-900">
              Restaurant details
            </DialogTitle>

            {/* Form element with submit handler */}
            <form className="flex flex-col space-y-5" onSubmit={handleSubmit}>
              
              {/* Step 0: Address fields */}
              {step === 0 && (
                <>
                  {/* City input */}
                  <div>
                    <Label className="text-sm font-medium text-gray-700">
                      City
                    </Label>
                    <Input
                      name="city"
                      value={restaurantData.city}
                      onChange={handleForm}
                      placeholder="City name*"
                      required
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>

                  {/* Zip Code input */}
                  <div>
                    <Label>Zip Code</Label>
                    <Input
                      name="zipCode"
                      value={restaurantData.zipCode}
                      onChange={handleForm}
                      placeholder="0000*"
                      required
                    />
                  </div>

                  {/* Street Name input */}
                  <div>
                    <Label>Street Name</Label>
                    <Input
                      name="streetName"
                      value={restaurantData.streetName}
                      onChange={handleForm}
                      placeholder="Street Name*"
                      required
                    />
                  </div>

                  {/* Phone Number input */}
                  <div>
                    <Label>Phone Number</Label>
                    <Input
                      name="phoneNumber"
                      value={restaurantData.phoneNumber}
                      onChange={handleForm}
                      placeholder="00000000*"
                      required
                    />
                  </div>
                </>
              )}

              {/* Step 1: Restaurant Type selector component */}
              {step === 1 && (
                <RestaurantType
                  restaurantData={restaurantData}
                  setRestaurantData={setRestaurantData}
                  handleForm={handleForm}
                />
              )}

              {/* Step 2: Opening hours selector component */}
              {step === 2 && (
                <RestaurantTiming
                  openingHours={openingHours}
                  setOpeningHours={setOpeningHours}
                />
              )}

              {/* Navigation buttons for the multi-step form */}
              <div className="flex justify-between">
                {/* Back button: disabled on first step */}
                <Button
                  type="button"
                  disabled={step === 0}
                  onClick={() => setStep(step - 1)}
                >
                  Back
                </Button>

                {/* Next button or Submit button depending on step */}
                {step < steps.length - 1 ? (
                  <Button type="button" onClick={() => setStep(step + 1)}>
                    Next
                  </Button>
                ) : (
                  <Button type="submit">Submit</Button>
                )}
              </div>
            </form>
          </DialogHeader>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default RestaurantDialog;
