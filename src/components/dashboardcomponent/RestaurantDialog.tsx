"use client"; 
// Tells Next.js that this component should be rendered on the client side (not server-side rendered)

import React, { useState, useCallback } from "react";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Label } from "@/components/ui/label"; // Accessible label component
import { Input } from "../ui/input"; // Custom input component
import { Button } from "../ui/button"; // Custom button component
import { db } from "@/lib/firebase"; // Firebase Firestore database instance
import { collection, addDoc, Timestamp } from "firebase/firestore"; // Firestore functions
import { toast } from "sonner"; // Toast notifications library
import RestaurantType from "./RestaurantType"; // Subcomponent for selecting restaurant type
import RestaurantTiming from "./RestaurantTiming"; // Subcomponent for setting opening hours
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { AlertCircle } from "lucide-react";
import { fetchRestaurantData } from "@/store/features/authSlice";

// Interface to define opening hours for each day
export interface OpeningHours {
  day: string;    // Day of the week (e.g., "monday")
  open: string;   // Opening time (e.g., "09:00")
  close: string;  // Closing time (e.g., "17:00")
  closed: boolean; // Whether restaurant is closed on that day
}

// Interface to define the structure of restaurant data
export interface Restaurant {
  restaurantId?: string; // Optional restaurant ID (auto-generated by Firestore)
  ownerId?: string;      // User ID of the owner (from authentication)
  domain: string;        // Unique domain for the restaurant
  city: string;
  zipCode: string;
  streetName: string;
  phoneNumber: string;
  restaurantType: string;
  name: string;          // Restaurant name from user data
  openingHours: OpeningHours[]; // Array of opening hours for each day
  logoUrl?: string;             // Optional logo image URL
  createdAt?: string;           // Timestamp when created
  updatedAt?: string;           // Timestamp when last updated
}

/**
 * Array of days to initialize opening hours state for each day of the week.
 */
export const day = [
  "sunday",
  "monday",
  "tuesday",
  "wednesday",
  "thursday",
  "friday",
  "saturday",
];

interface RestaurantDialogProps {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  isMandatory?: boolean;
}

/**
 * RestaurantDialog Component
 * 
 * A multi-step modal dialog to collect restaurant information.
 * Steps include Address info, Restaurant Type, and Opening Hours.
 * 
 * @param {RestaurantDialogProps} props - Props include:
 *  - isOpen: boolean to control visibility of the dialog
 *  - setIsOpen: function to update visibility (open/close dialog)
 */
function RestaurantDialog({ isOpen, setIsOpen, isMandatory = false }: RestaurantDialogProps) {
  const steps = ["Address", "TypeOfRestaurant", "Timing"];
  const [step, setStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showError, setShowError] = useState(false);
  const [internalOpen, setInternalOpen] = useState(isOpen);
  const dispatch = useAppDispatch();

  // Initialize openingHours state with one entry per day, defaulting to closed
  const [openingHours, setOpeningHours] = useState<OpeningHours[]>(
    day.map((day) => ({
      day,
      open: "",
      close: "",
      closed: false,
    }))
  );

  // Use AppSelector to get user authentication info and restaurant name
  const user = useAppSelector((state) => state.auth.user);
  const restaurantName = useAppSelector((state) => state.auth.restaurantName);
  const domain = useAppSelector((state) => state.auth.domain);
  const isLoading = useAppSelector((state) => state.auth.isLoading);

  // Restaurant data state holding all inputs from the form
  const [restaurantData, setRestaurantData] = useState<Restaurant>({
    restaurantId: "",
    ownerId: "",
    domain: domain || "", // Initialize with domain from user data
    city: "",
    zipCode: "",
    streetName: "",
    phoneNumber: "",
    restaurantType: "",
    name: restaurantName || "", // Initialize with restaurant name from user data
    openingHours: openingHours,
    logoUrl: "",
  });

  // Validate required fields
  const isFormValid = useCallback(() => {
    return (
      restaurantData.city.trim() !== "" &&
      restaurantData.zipCode.trim() !== "" &&
      restaurantData.streetName.trim() !== "" &&
      restaurantData.phoneNumber.trim() !== "" &&
      restaurantData.restaurantType.trim() !== ""
    );
  }, [restaurantData]);

  // Handle sheet state changes
  const handleOpenChange = useCallback((open: boolean) => {
    if (!open && isMandatory && !isFormValid()) {
      setShowError(true);
      return;
    }
    setInternalOpen(open);
    setIsOpen(open);
  }, [isMandatory, setIsOpen, isFormValid]);

  // Handle input changes on form fields (city, zipCode, etc.)
  const handleForm = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Update the corresponding field in restaurantData state
    setRestaurantData({ ...restaurantData, [e.target.name]: e.target.value });
    setShowError(false);
  };

  /**
   * Handle form submission when user clicks Submit on last step.
   * Save restaurant data to Firestore database.
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isFormValid()) {
      setShowError(true);
      return;
    }

    setIsSubmitting(true);
    try {
      // Add a new document to &apos;restaurants&apos; collection in Firestore
      const refRestaurantCollection = await addDoc(
        collection(db, "restaurants"),
        {
          ...restaurantData,
          ownerId: user?.uid,
          domain: domain, // Include domain from user data
          name: restaurantName, // Include restaurant name from user data
          openingHours: openingHours,
          createdAt: Timestamp.now(),
          updatedAt: Timestamp.now(),
        }
      );

      // If document added successfully
      if (refRestaurantCollection) {
        // Fetch the updated restaurant data to update Redux store
        if (user?.uid) {
          await dispatch(fetchRestaurantData(user.uid)).unwrap();
        }
        
        setIsOpen(false);
        toast.success("Restaurant information updated successfully");
      }
    } catch (error) {
      console.error("Error saving restaurant:", error);
      toast.error("Failed to save restaurant information");
    } finally {
      setIsSubmitting(false);
    }
  };

  console.log(restaurantData); // Debug: log current form state on each render

  if (isLoading || !user) {
    return null;
  }

  return (
    <Sheet open={internalOpen} onOpenChange={handleOpenChange}>
      <SheetContent 
        side="right" 
        className="w-full sm:max-w-[600px] overflow-y-auto bg-white"
        onPointerDownOutside={(event) => {
          if (isMandatory && !isFormValid()) {
            event.preventDefault();
            setShowError(true);
          }
        }}
        onEscapeKeyDown={(event) => {
          if (isMandatory && !isFormValid()) {
            event.preventDefault();
            setShowError(true);
          }
        }}
      >
        <SheetHeader className="mb-8">
          <SheetTitle className="text-2xl font-bold text-gray-900">
            Restaurant Setup
          </SheetTitle>
          {isMandatory && (
            <SheetDescription className="text-base text-gray-600 mt-2">
              Please complete all required fields to continue. This information is essential for your restaurant's profile.
            </SheetDescription>
          )}
        </SheetHeader>

        <form className="flex flex-col space-y-6" onSubmit={handleSubmit}>
          {step === 0 && (
            <>
              <div className="space-y-4">
                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-1.5 block">
                    City <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    name="city"
                    value={restaurantData.city}
                    onChange={handleForm}
                    placeholder="Enter your city"
                    required
                    className={`w-full px-4 py-2.5 border rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all duration-200 ${
                      showError && !restaurantData.city ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                </div>

                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-1.5 block">
                    Zip Code <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    name="zipCode"
                    value={restaurantData.zipCode}
                    onChange={handleForm}
                    placeholder="Enter zip code"
                    required
                    className={`w-full px-4 py-2.5 border rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all duration-200 ${
                      showError && !restaurantData.zipCode ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                </div>

                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-1.5 block">
                    Street Name <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    name="streetName"
                    value={restaurantData.streetName}
                    onChange={handleForm}
                    placeholder="Enter street name"
                    required
                    className={`w-full px-4 py-2.5 border rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all duration-200 ${
                      showError && !restaurantData.streetName ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                </div>

                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-1.5 block">
                    Phone Number <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    name="phoneNumber"
                    value={restaurantData.phoneNumber}
                    onChange={handleForm}
                    placeholder="Enter phone number"
                    required
                    className={`w-full px-4 py-2.5 border rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all duration-200 ${
                      showError && !restaurantData.phoneNumber ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                </div>
              </div>
            </>
          )}

          {showError && (
            <div className="flex items-center gap-2 text-red-500 text-sm bg-red-50 p-3 rounded-lg">
              <AlertCircle className="w-4 h-4" />
              <span>Please fill in all required fields to continue</span>
            </div>
          )}

          {step === 1 && (
            <RestaurantType
              restaurantData={restaurantData}
              setRestaurantData={setRestaurantData}
              handleForm={handleForm}
            />
          )}

          {step === 2 && (
            <RestaurantTiming
              openingHours={openingHours}
              setOpeningHours={setOpeningHours}
            />
          )}

          <div className="flex justify-between pt-6 border-t border-gray-200">
            <Button
              type="button"
              variant="outline"
              onClick={() => setStep(step - 1)}
              disabled={step === 0}
              className="px-6"
            >
              Previous
            </Button>

            {step < steps.length - 1 ? (
              <Button
                type="button"
                onClick={() => setStep(step + 1)}
                className="ml-auto px-6"
              >
                Next
              </Button>
            ) : (
              <Button
                type="submit"
                disabled={isSubmitting}
                className="ml-auto px-6"
              >
                {isSubmitting ? "Saving..." : "Complete Setup"}
              </Button>
            )}
          </div>
        </form>
      </SheetContent>
    </Sheet>
  );
}

export default RestaurantDialog;
